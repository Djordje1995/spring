1
00:00:00,684 --> 00:00:01,558
<v Darby>All right,</v>

2
00:00:01,558 --> 00:00:03,143
so we have our annotation taken care of.

3
00:00:03,143 --> 00:00:06,634
We still need to fix this CourseCodeConstraintValidator.

4
00:00:06,634 --> 00:00:10,828
That red squiggly line is really starting to annoy me,

5
00:00:10,828 --> 00:00:12,858
it's really starting to bug me.

6
00:00:12,858 --> 00:00:14,482
Let's go ahead and resolve this issue.

7
00:00:14,482 --> 00:00:18,510
That's step 1B, creating our CourseCodeConstraintValidator.

8
00:00:18,510 --> 00:00:23,272
I'll go ahead and just highlight the actual string here

9
00:00:23,272 --> 00:00:24,781
for that class name,

10
00:00:24,781 --> 00:00:28,114
and I'll use that to create a new class.

11
00:00:31,405 --> 00:00:35,292
Now, let me swing over and create a new class.

12
00:00:35,292 --> 00:00:39,459
In my validation package, I'll create a new class.

13
00:00:43,580 --> 00:00:45,733
The actual name of the class, I'll just drop in

14
00:00:45,733 --> 00:00:47,318
that actual name that I just copied,

15
00:00:47,318 --> 00:00:51,174
a little copy/paste exercise, CourseCodeConstraintValidator.

16
00:00:51,174 --> 00:00:53,288
Go ahead and keep all the other defaults here,

17
00:00:53,288 --> 00:00:56,038
and go ahead and click on Finish.

18
00:00:58,364 --> 00:00:59,458
All right, so here we go.

19
00:00:59,458 --> 00:01:03,125
We have the basic layout here for our class.

20
00:01:05,148 --> 00:01:07,137
Now, I know this class has to implement

21
00:01:07,137 --> 00:01:09,541
the ConstraintValidator interface,

22
00:01:09,541 --> 00:01:13,124
so I'll say implements ConstraintValidator.

23
00:01:15,749 --> 00:01:18,915
Then I'll pass in CourseCode and the string.

24
00:01:18,915 --> 00:01:23,338
ConstraintValidator is actually an interface

25
00:01:23,338 --> 00:01:26,171
from the javax validation package.

26
00:01:27,204 --> 00:01:31,190
Make sure we do the import and get the correct one here.

27
00:01:31,190 --> 00:01:33,607
Okay, so this is good so far.

28
00:01:35,536 --> 00:01:36,838
All right, so now we can go ahead

29
00:01:36,838 --> 00:01:39,481
and click on the little red X here on the left hand side,

30
00:01:39,481 --> 00:01:43,055
and we'll tell Eclipse to Add the unimplemented methods,

31
00:01:43,055 --> 00:01:45,983
just to make sure that we implement all the methods

32
00:01:45,983 --> 00:01:47,976
that are required here.

33
00:01:47,976 --> 00:01:51,262
Nice little stub code it'll generate for us.

34
00:01:51,262 --> 00:01:52,887
Let me zoom out for a second.

35
00:01:52,887 --> 00:01:55,452
Eclipse dropped in two methods here.

36
00:01:55,452 --> 00:01:56,958
There's an initialize method

37
00:01:56,958 --> 00:01:58,790
that we have to implement or override,

38
00:01:58,790 --> 00:02:02,161
and also there's a is valid method,

39
00:02:02,161 --> 00:02:03,956
and that's where we'll put our actual business logic

40
00:02:03,956 --> 00:02:08,123
to return true or false if the given string validates.

41
00:02:10,739 --> 00:02:12,809
All right, so what I want to do is define a coursePrefix

42
00:02:12,809 --> 00:02:14,272
that we can validate against,

43
00:02:14,272 --> 00:02:17,727
so this is the actual prefix that they've set up

44
00:02:17,727 --> 00:02:20,005
with the annotation to say,

45
00:02:20,005 --> 00:02:23,335
hey, we validate it against a given prefix.

46
00:02:23,335 --> 00:02:25,649
I need to actually assign this

47
00:02:25,649 --> 00:02:30,490
when this annotation or ConstraintValidator is initialized,

48
00:02:30,490 --> 00:02:34,657
so here I'll say coursePrefix equals theCourseCode.value.

49
00:02:36,586 --> 00:02:41,014
That .value actually accesses the attribute value

50
00:02:41,014 --> 00:02:43,491
for that given annotation.

51
00:02:43,491 --> 00:02:45,764
Here, it'll actually be LUV,

52
00:02:45,764 --> 00:02:47,277
but we could easily customize that

53
00:02:47,277 --> 00:02:48,946
to be something different,

54
00:02:48,946 --> 00:02:53,500
and we'll do that in some of the following videos.

55
00:02:53,500 --> 00:02:54,882
All right, so we have the basic set up,

56
00:02:54,882 --> 00:02:57,975
now let's go ahead and get down and dirty

57
00:02:57,975 --> 00:03:01,553
and let's write our real business rule here,

58
00:03:01,553 --> 00:03:03,748
check and see if something is valid.

59
00:03:03,748 --> 00:03:06,510
That first parameter coming in, arg0,

60
00:03:06,510 --> 00:03:08,416
that's theCode, that's the actual text

61
00:03:08,416 --> 00:03:11,749
that the user entered on their HTML form,

62
00:03:11,749 --> 00:03:12,725
and then the second argument

63
00:03:12,725 --> 00:03:15,946
is the ConstraintValidatorContext,

64
00:03:15,946 --> 00:03:19,157
that's just an actual parameter that we can use

65
00:03:19,157 --> 00:03:22,004
to give additional error messages if we need it

66
00:03:22,004 --> 00:03:24,837
for this given validation routine.

67
00:03:27,533 --> 00:03:31,031
All right, so I'll add some nice descriptive arguments here.

68
00:03:31,031 --> 00:03:33,221
Now, let's go ahead and do some of our work

69
00:03:33,221 --> 00:03:34,603
inside of this method,

70
00:03:34,603 --> 00:03:35,903
so basically we want to check to see

71
00:03:35,903 --> 00:03:38,705
if something's true or false and give a result,

72
00:03:38,705 --> 00:03:42,113
so I'll set the boolean result equals

73
00:03:42,113 --> 00:03:44,863
theCode.startsWith course prefix.

74
00:03:46,749 --> 00:03:49,752
I want to see, whatever the user entered on their HTML form,

75
00:03:49,752 --> 00:03:53,932
does it start with our desired course prefix?

76
00:03:53,932 --> 00:03:56,128
If so, we just basically assign it

77
00:03:56,128 --> 00:03:58,367
so that result will be equal to the result

78
00:03:58,367 --> 00:04:00,600
of theCode.startsWith that'll return

79
00:04:00,600 --> 00:04:02,433
the value of true or false.

80
00:04:02,433 --> 00:04:05,396
That's basically our business rule or our business logic.

81
00:04:05,396 --> 00:04:07,306
Now, again, this is very simple,

82
00:04:07,306 --> 00:04:09,662
if you're writing your own custom validation rule

83
00:04:09,662 --> 00:04:13,829
you can really do anything you want in this invalid method.

84
00:04:14,683 --> 00:04:17,552
You can talk to a database, call a web service,

85
00:04:17,552 --> 00:04:20,515
do some special number crunching, whatever you need to do,

86
00:04:20,515 --> 00:04:22,830
you can do inside that is valid method,

87
00:04:22,830 --> 00:04:23,930
it's totally up to you,

88
00:04:23,930 --> 00:04:25,398
you simply return a true or false

89
00:04:25,398 --> 00:04:29,379
based on your own custom business logic.

90
00:04:29,379 --> 00:04:30,800
All right, so this looks good so far,

91
00:04:30,800 --> 00:04:32,424
so I'll go ahead and save this

92
00:04:32,424 --> 00:04:36,424
and we can go ahead and move onto our next step.

