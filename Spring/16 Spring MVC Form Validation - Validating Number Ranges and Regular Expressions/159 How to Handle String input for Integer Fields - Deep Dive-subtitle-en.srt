1
00:00:01,060 --> 00:00:02,060
All right.

2
00:00:02,060 --> 00:00:05,540
So we have this working, as far as, giving
our own custom message, but there's a lot

3
00:00:05,540 --> 00:00:09,500
of things that we didn't add messages resource
file and I kind of want to break it down,

4
00:00:09,500 --> 00:00:14,500
kind of decipher it and figure out exactly
what those different components were, and

5
00:00:14,691 --> 00:00:19,410
also how you could use this on your own project
if you had a totally different object module

6
00:00:19,410 --> 00:00:21,140
and a totally different form set.

7
00:00:21,140 --> 00:00:22,140
All right.

8
00:00:22,140 --> 00:00:26,710
So let's go ahead and what we'll do is we'll
actually add some logging or debug messages

9
00:00:26,710 --> 00:00:28,740
here in our Customer Controller.

10
00:00:28,740 --> 00:00:33,740
So in our Customer Controller, I'm going to
actually inspect the Binding Result object,

11
00:00:33,770 --> 00:00:38,770
because this object has a wealth of information,
a lot of good data that we can use to kind

12
00:00:39,010 --> 00:00:43,000
of decipher what's going on during the validation
process.

13
00:00:43,000 --> 00:00:46,900
So what I'll do is I'll simply add a System
out print line and I'll print out the Binding

14
00:00:46,900 --> 00:00:48,620
Result.

15
00:00:48,620 --> 00:00:53,620
So I'll say, "Binding Result and then the
Binding Result," and again the Binding result's

16
00:00:54,120 --> 00:00:59,120
a parameter that's being passed in to this
method when we process the form.

17
00:00:59,460 --> 00:01:04,460
Then also, just to kind of help out with showing
you this stuff on the video, I'm going to

18
00:01:05,269 --> 00:01:09,840
add some line breaks or some line spaces or
new lines, just to kind of move things up

19
00:01:09,840 --> 00:01:12,749
on the console window, but this is not really
required.

20
00:01:12,749 --> 00:01:16,880
Line 48's kind of just for me to help you
show stuff on the video.

21
00:01:16,880 --> 00:01:18,609
All right.

22
00:01:18,609 --> 00:01:23,609
So let's go ahead and save this.

23
00:01:23,740 --> 00:01:28,740
Let's go back and get it up and running and
we can check out some of our logs here in

24
00:01:30,009 --> 00:01:31,670
the console window.

25
00:01:31,670 --> 00:01:34,939
So I just go to the customer form here.

26
00:01:34,939 --> 00:01:39,939
And I'll just enter some data here for Smith,
I'll enter some bad data here for freePasses,

27
00:01:42,439 --> 00:01:46,829
and then I'll go ahead and hit on the submit
button.

28
00:01:46,829 --> 00:01:50,109
Okay, great.

29
00:01:50,109 --> 00:01:52,350
So now we should have some good data in our
console when it runs.

30
00:01:52,350 --> 00:01:54,219
So let me go ahead and double click console,
bring it up.

31
00:01:54,219 --> 00:01:55,219
Okay, good stuff.

32
00:01:55,219 --> 00:01:56,219
Really good stuff.

33
00:01:56,219 --> 00:01:58,880
See these last two lines here are very important
for us.

34
00:01:58,880 --> 00:02:00,039
All right.

35
00:02:00,039 --> 00:02:04,689
So this line here, the Binding Result, basically
says, "Hey, this Binding Result had one error,"

36
00:02:04,689 --> 00:02:09,319
okay and we know about that, it's on the freePasses,
of course.

37
00:02:09,319 --> 00:02:12,870
And the second line will actually give you
more details as far as where it occurred so

38
00:02:12,870 --> 00:02:17,870
it'll say that, "Hey there's a field error
on object customer," and that's the actual

39
00:02:18,540 --> 00:02:23,540
Spring MVC attribute name, and then on the
field freePasses of that customer object.

40
00:02:26,870 --> 00:02:27,870
Okay, cool.

41
00:02:27,870 --> 00:02:32,540
Good stuff, good stuff.

42
00:02:32,540 --> 00:02:36,900
And then it says the rejected value, so whatever
the data that the user entered.

43
00:02:36,900 --> 00:02:40,610
So you can grab that, if you want to say,
I don't know, play around with that or do

44
00:02:40,610 --> 00:02:43,170
something with it.

45
00:02:43,170 --> 00:02:44,319
Here comes the really good part.

46
00:02:44,319 --> 00:02:49,319
All of the error codes that Spring MVC will
use when it displays a custom message, so

47
00:02:50,560 --> 00:02:52,610
it'll go out and look for these.

48
00:02:52,610 --> 00:02:56,760
So they have, one of their error codes, its
type Mismatch customer freePasses.

49
00:02:56,760 --> 00:03:01,760
So what we'll do is we're simply overriding
their default error code and we're simply

50
00:03:02,680 --> 00:03:05,549
providing our own custom message.

51
00:03:05,549 --> 00:03:10,549
So here in the config file we say, "Hey for
that type Mismatch customer.freePasses, use

52
00:03:11,120 --> 00:03:12,659
our custom message."

53
00:03:12,659 --> 00:03:16,180
And that's how that piece works out there.

54
00:03:16,180 --> 00:03:17,819
Then they also have other error codes here.

55
00:03:17,819 --> 00:03:22,719
You can simply have a type Mismatch on any
freePasses not related to customer in any

56
00:03:22,719 --> 00:03:27,719
field that has freePasses or you can have
a type Mismatch on any field that has an integer

57
00:03:28,260 --> 00:03:31,329
or you can have just a more generic type Mismatch.

58
00:03:31,329 --> 00:03:36,329
So basically it goes from very specific starting
at the left, to very generic all the way over

59
00:03:37,480 --> 00:03:39,900
to the right, but we wanted to make use of
that first one there because we want it to

60
00:03:39,900 --> 00:03:43,239
be specific only for that given specific field.

61
00:03:43,239 --> 00:03:46,500
So you can use this same approach on your
own project.

62
00:03:46,500 --> 00:03:50,300
You simply just do a print line on the Binding
Result and that'll give you all the codes

63
00:03:50,300 --> 00:03:53,830
that Spring's using or looking for and you
can simply override it accordingly.

64
00:03:53,830 --> 00:03:58,180
So just a nice little debugging trick there
for you where you can override the error code

65
00:03:58,180 --> 00:04:00,340
and give your own custom message.

66
00:04:00,340 --> 00:04:05,180
So you can apply this same technique on your
own project.

67
00:04:05,180 --> 00:04:06,180
And then there you go.

68
00:04:06,180 --> 00:04:07,180
So you have it up and running.

69
00:04:07,180 --> 00:04:11,879
I do the print line on Binding Result.

70
00:04:11,879 --> 00:04:13,269
Just a real simple one liner there.

71
00:04:13,269 --> 00:04:18,269
You can inspect the console logs and then
figure out which error codes that you need.

72
00:04:19,190 --> 00:04:24,190
You simply find those codes, drop them into
your messages.properties file, get it all

73
00:04:26,539 --> 00:04:31,539
configured up in your Spring configuration
file, like I showed you a little earlier,

74
00:04:32,300 --> 00:04:33,300
and run it in your application.

75
00:04:33,300 --> 00:04:36,560
And then booyah, your own custom error message.

76
00:04:36,560 --> 00:04:37,560
So there you go.

77
00:04:37,560 --> 00:04:38,560
All righty.

78
00:04:38,560 --> 00:04:39,560
Good stuff.

79
00:04:39,560 --> 00:04:41,319
I'll see you in the next video.

