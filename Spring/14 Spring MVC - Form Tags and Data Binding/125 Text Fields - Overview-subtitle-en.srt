1
00:00:01,425 --> 00:00:02,412
<v Instructor>In this video,</v>

2
00:00:02,412 --> 00:00:06,579
we're gonna use the Spring MVC form tag for text fields.

3
00:00:08,891 --> 00:00:10,284
So here's the big picture.

4
00:00:10,284 --> 00:00:12,664
We're gonna have a form that's gonna have two text fields

5
00:00:12,664 --> 00:00:14,301
for first name and last name.

6
00:00:14,301 --> 00:00:16,832
The user will enter that information, they'll hit submit,

7
00:00:16,832 --> 00:00:18,620
it'll pass it over to our controller,

8
00:00:18,620 --> 00:00:20,826
and then our controller will send the user to

9
00:00:20,826 --> 00:00:22,493
a confirmation page.

10
00:00:24,065 --> 00:00:27,176
So in our Spring controller, before we show the form,

11
00:00:27,176 --> 00:00:29,255
we must add a model attribute.

12
00:00:29,255 --> 00:00:30,880
So this is basically a bean

13
00:00:30,880 --> 00:00:33,562
that's gonna be used to hold the form data,

14
00:00:33,562 --> 00:00:36,592
and this will give us support for data binding.

15
00:00:36,592 --> 00:00:40,342
So we'll actually bind form data to our bean.

16
00:00:42,351 --> 00:00:44,452
All right, so here's the code snippet from our controller

17
00:00:44,452 --> 00:00:46,597
for actually showing the form.

18
00:00:46,597 --> 00:00:50,637
So when we show the form, we need to add a model attribute.

19
00:00:50,637 --> 00:00:52,495
So here I have showForm.

20
00:00:52,495 --> 00:00:54,689
This method takes a new parameter here

21
00:00:54,689 --> 00:00:56,488
called Model, theModel.

22
00:00:56,488 --> 00:00:59,228
And remember, theModel is an object that we can use to

23
00:00:59,228 --> 00:01:02,839
kind of pass data around between controllers and views.

24
00:01:02,839 --> 00:01:04,410
So here what I'll do is I'll say,

25
00:01:04,410 --> 00:01:06,694
theModel.addAttribute.

26
00:01:06,694 --> 00:01:09,317
I give the model name of student

27
00:01:09,317 --> 00:01:12,452
and then the actual value of new Student.

28
00:01:12,452 --> 00:01:14,847
So, think with me, I'm creating a new Student object,

29
00:01:14,847 --> 00:01:16,890
I'm creating an empty Student object

30
00:01:16,890 --> 00:01:18,466
that I'll pass to the form

31
00:01:18,466 --> 00:01:21,891
for the form to make use of with data binding.

32
00:01:21,891 --> 00:01:23,667
Now, the important thing here is that,

33
00:01:23,667 --> 00:01:25,583
when I give the addAttribute,

34
00:01:25,583 --> 00:01:27,139
the attribute name of student,

35
00:01:27,139 --> 00:01:30,297
that's the same name that our form will use

36
00:01:30,297 --> 00:01:32,828
to reference this model attribute.

37
00:01:32,828 --> 00:01:34,848
So that part of it is really important,

38
00:01:34,848 --> 00:01:36,578
and we'll see this on the next slide

39
00:01:36,578 --> 00:01:39,911
when we look at the coding for our form.

40
00:01:42,020 --> 00:01:43,448
All right, so here's our form.

41
00:01:43,448 --> 00:01:45,851
So we're making use of the Spring MVC form tag.

42
00:01:45,851 --> 00:01:48,962
So I say form:form, I give the action,

43
00:01:48,962 --> 00:01:51,192
and then the modelAttribute= student.

44
00:01:51,192 --> 00:01:53,963
Again, that's the same attribute name

45
00:01:53,963 --> 00:01:55,473
that I used on the previous slide

46
00:01:55,473 --> 00:01:58,197
for writing the code for showing this form,

47
00:01:58,197 --> 00:01:59,497
and then I go ahead and just list out

48
00:01:59,497 --> 00:02:01,062
my two text fields here.

49
00:02:01,062 --> 00:02:03,047
First name, I give form:input,

50
00:02:03,047 --> 00:02:04,742
that will generate a text field.

51
00:02:04,742 --> 00:02:07,412
I'll set the path to firstName.

52
00:02:07,412 --> 00:02:11,151
Last name, form:input, path= lastName,

53
00:02:11,151 --> 00:02:12,672
and finally, a submit button.

54
00:02:12,672 --> 00:02:14,163
Now, you're probably wondering,

55
00:02:14,163 --> 00:02:16,636
what's up with the path= firstName

56
00:02:16,636 --> 00:02:19,823
and the path= lastName, kind of how does that map out?

57
00:02:19,823 --> 00:02:22,586
Well, this actually binds this form field

58
00:02:22,586 --> 00:02:24,753
to a property on the bean.

59
00:02:26,104 --> 00:02:28,161
When the form is first loaded,

60
00:02:28,161 --> 00:02:30,754
what Spring MVC will do behind the scenes is that

61
00:02:30,754 --> 00:02:34,955
they'll actually use this to populate the form field.

62
00:02:34,955 --> 00:02:37,063
When they have path= firstName,

63
00:02:37,063 --> 00:02:40,843
Spring MVC will call student.getFirstName,

64
00:02:40,843 --> 00:02:43,282
and they use that model attribute from up top to

65
00:02:43,282 --> 00:02:44,534
retrieve that data.

66
00:02:44,534 --> 00:02:48,110
If it's null, then that form field will simply be empty.

67
00:02:48,110 --> 00:02:50,636
So in our case of creating a new student from scratch,

68
00:02:50,636 --> 00:02:51,469
then it'll be empty,

69
00:02:51,469 --> 00:02:53,302
but you can easily prepopulate that

70
00:02:53,302 --> 00:02:54,861
accordingly if you'd like.

71
00:02:54,861 --> 00:02:57,144
We'll do a similar thing here for last name,

72
00:02:57,144 --> 00:02:58,955
form:input path= lastName.

73
00:02:58,955 --> 00:03:03,122
Behind the scenes, Spring MVC will call student.getLastName.

74
00:03:05,294 --> 00:03:07,196
Now, when the form is submitted,

75
00:03:07,196 --> 00:03:10,010
Spring will actually call the setter methods.

76
00:03:10,010 --> 00:03:11,157
All right, so they're real simple.

77
00:03:11,157 --> 00:03:13,150
When they submit, they call setter methods.

78
00:03:13,150 --> 00:03:17,844
So here for first name, form:input path= firstName,

79
00:03:17,844 --> 00:03:20,772
Spring will call student.setFirstName

80
00:03:20,772 --> 00:03:22,378
and only use whatever data the user

81
00:03:22,378 --> 00:03:24,348
entered there in the form field.

82
00:03:24,348 --> 00:03:28,106
A similar thing for last name, student.setLastName.

83
00:03:28,106 --> 00:03:31,110
Again, Spring will call the setter methods

84
00:03:31,110 --> 00:03:34,027
when they actually submit the form.

85
00:03:35,924 --> 00:03:37,630
All right, so the form data's been submitted.

86
00:03:37,630 --> 00:03:40,452
Now, how do we actually read the data in our controller?

87
00:03:40,452 --> 00:03:41,871
Well, in our controller,

88
00:03:41,871 --> 00:03:45,463
we can simply make use of a new Spring annotation called

89
00:03:45,463 --> 00:03:48,693
@ModelAttribute, and we give the name of the attribute.

90
00:03:48,693 --> 00:03:51,881
So again, we're using student, in all lower case.

91
00:03:51,881 --> 00:03:53,718
They'll actually bind that object

92
00:03:53,718 --> 00:03:57,725
to this parameter being passed in theStudent.

93
00:03:57,725 --> 00:03:58,933
Some work behind the scenes,

94
00:03:58,933 --> 00:04:01,484
Spring will actually take that model attribute

95
00:04:01,484 --> 00:04:04,004
and bind it to this variable here, theStudent,

96
00:04:04,004 --> 00:04:06,434
and we can use it in our controller.

97
00:04:06,434 --> 00:04:10,041
So here, I simply log the input data, I simply say,

98
00:04:10,041 --> 00:04:14,101
theStudent, I say, theStudent.getLastName and

99
00:04:14,101 --> 00:04:15,776
whatever else I wanted to do.

100
00:04:15,776 --> 00:04:19,429
And here I simply return to student-confirmation page.

101
00:04:19,429 --> 00:04:21,300
But the key here is that Spring will actually

102
00:04:21,300 --> 00:04:22,915
take all that form data,

103
00:04:22,915 --> 00:04:25,187
bind it automatically to your object,

104
00:04:25,187 --> 00:04:27,028
and then pass it into your controller

105
00:04:27,028 --> 00:04:28,152
so you can make use of it.

106
00:04:28,152 --> 00:04:30,431
So there's no need for you to do the manual

107
00:04:30,431 --> 00:04:33,088
request.get parameter for each one of the fields.

108
00:04:33,088 --> 00:04:35,125
Spring will handle all of that work for you,

109
00:04:35,125 --> 00:04:36,732
and that's the real benefit

110
00:04:36,732 --> 00:04:38,543
of using the Spring MVC form tags,

111
00:04:38,543 --> 00:04:40,581
is they have actual data binding,

112
00:04:40,581 --> 00:04:45,184
and that's the part that I just love, I love it.

113
00:04:45,184 --> 00:04:46,180
All right, good stuff.

114
00:04:46,180 --> 00:04:47,237
All right, so at the bottom here,

115
00:04:47,237 --> 00:04:48,550
we return the confirmation page.

116
00:04:48,550 --> 00:04:52,717
So let's go look at the confirmation page real quick.

117
00:04:53,666 --> 00:04:55,900
So here we simply say the student is confirmed,

118
00:04:55,900 --> 00:04:58,421
and then we simply use our dollar sign, curly brace,

119
00:04:58,421 --> 00:05:00,760
student.firstName, student.lastName.

120
00:05:00,760 --> 00:05:03,371
So again we're using the model attribute name

121
00:05:03,371 --> 00:05:07,009
and then we actually access those properties accordingly

122
00:05:07,009 --> 00:05:09,469
by calling get.firstName, get.lastName.

123
00:05:09,469 --> 00:05:10,302
All right, and that's it.

124
00:05:10,302 --> 00:05:14,469
That's our confirmation page and we're good to go.

125
00:05:15,513 --> 00:05:16,630
So we covered a lot of stuff there.

126
00:05:16,630 --> 00:05:18,856
I kind of want to step back for a second and

127
00:05:18,856 --> 00:05:19,747
pull it all together.

128
00:05:19,747 --> 00:05:21,497
So we had our form up front.

129
00:05:21,497 --> 00:05:23,414
They would submit data to our controller,

130
00:05:23,414 --> 00:05:25,527
our controller will take that data, process it,

131
00:05:25,527 --> 00:05:30,115
and then pass it off to the confirmation page.

132
00:05:30,115 --> 00:05:32,198
All right, so that was a lot of work there.

133
00:05:32,198 --> 00:05:33,768
What we're gonna do in the next video,

134
00:05:33,768 --> 00:05:36,379
is that we'll actually go through our development process

135
00:05:36,379 --> 00:05:38,431
and we'll walk through it step-by-step.

136
00:05:38,431 --> 00:05:41,767
So the first thing we'll do is we'll create a Student class,

137
00:05:41,767 --> 00:05:45,163
then we'll create a Student controller class,

138
00:05:45,163 --> 00:05:47,970
next we'll create an HTML form,

139
00:05:47,970 --> 00:05:50,808
then we'll build a form processing code,

140
00:05:50,808 --> 00:05:53,766
and finally, we'll create the confirmation page.

141
00:05:53,766 --> 00:05:57,041
So we'll take care of all of this in the next video.

142
00:05:57,041 --> 00:05:59,291
So I'll see you over there.

